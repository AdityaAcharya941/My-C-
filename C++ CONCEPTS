//COMPLEX CLASS//
// // #include <iostream>
// // using namespace std;

// // class complex {
// // private:
// //     int real, image;

// // public:
// //     void set_data(int r, int i) {
// //         real = r;
// //         image = i;
// //     }

// //     void output() {
// //         if (image >= 0) {
// //             cout << real << "+" << image << "i" << endl;
// //         } else {
// //             cout << real <<image << "i" << endl;
// //         }
// //     }

// //     complex sum(complex obj) {
// //         complex temp;
// //         temp.real = real + obj.real;
// //         temp.image = image + obj.image;
// //         return temp;
// //     }
// // };

// // // int main() {
// // //     complex c1, c2, c3;
// // //     c1.set_data(5, 7);
// // //     c2.set_data(5, -7);
// // //     c1.output();
// // //     c2.output();
// // //     c3 = c1.sum(c2);
// // //     c3.output();
// // //     return 0;
// // // }

// // #include <iostream>
// // using namespace std;
// // class Array{
// //     private:
// //     int arr[10];
// //     int n;
// //     public:
// //     void get_data()
// //     {cout<<"enter no. of element :";
// //     cin>>n;
// //     for(int i=0;i<n;i++){
// //         cout<<"enter value of "<<i+1<<" element:";
// //         cin>>arr[i];
// //     }}
// //     void output()
// //     {
// //         for(int i=0;i<n;i++)
// //         {
// //             cout<<arr[i]<<" ";
// //         }
// //         cout<<endl;
// //     }
// // };
// // int main()
// // { 
// //  Array a1,a2;
// //  a1.get_data();
// //  a2.get_data();
// //  a1.output();
// //  a2.output();
// //     return 0;
// // }

// #include <iostream>
// #include <string.h>
// using namespace std;    
// class mystring
// {
//     private:
//     char str[20];
//     public:
//     void get_data()
//     {
//         cout<<"enter string:";
//         //cin>>str;
//         cin.getline(str,100);
//     }
//     void output()
//     {
//         cout<<str<<endl;
//     }
//     mystring sum(mystring obj)
//     {
//         mystring temp;
//         strcpy(temp.str,str);
//         strcat(temp.str,obj.str);
//         return temp;
//     }
// };
// int main()
// {
//     mystring s1,s2,s3;
//     s1.get_data();
//     s2.get_data();
//     s1.output();
//     s2.output();
//     s3=s1.sum(s2);
//     s3.output();
//     return 0;
// }

// #include <iostream>
// using namespace std;
// struct data
// {
//     char p;
//     int q;
//     double r;
//     char s;

// };
// int main()
// {
//     data d1;
//     cout<<sizeof(d1)<<endl;
//     return 0;
// }
// int main()
// {
//     string s1;
//     string s2;
//     cout<<"enter string:";
//     getline(cin,s1);
//     cout<<"enter string:";
//     getline(cin,s2);
//     cout<<s1<<endl;
//     cout<<s2<<endl;
//     cout<<s1+s2<<endl;
//     return 0;
// }

// #include<iostream>
// using namespace std;
// class data{
//     int a ;
//     static int b;
//     public:
//          void f1(int a, int b)
//          {
//             this->a=10;
//             data::b=20;
//          }
//          static void f2()
//          {
//             data::b=20;
//          }
//          void output()
//          {
//             cout<<a << b <<endl;
//          }
// };
// int data::b;

// int main()
// {
//     data d1;
//     d1.f1(10,20);
//     d1.f2();
//     data::f2();
//     d1.output();
//     return 0;
// }

// #include<iostream>
// using namespace std;
// class data{
//     int a;
//     mutable float b;
//     public:
//     data(int a1, float b1)
//     {
//         a=a1;
//         b=b1;
//     }
//     void output() const
//     {
//         // a=10;
//         b=200;
//         cout<<a<<" "<<b<<endl;
//     }
// };
// int main()
// {
//     data d1(10,7.5);
//     const data d2(20,9.5);
//     d1.output();
//     d2.output();
// }

// #include<iostream>
// using namespace std;
// template<typename T>
// T sum(T a, T b)
// {
//     return a+b;
// }
// int sum(int a, int b)
// {
//     cout<<"Int ";
//     return a+b;
// }
// int sum(double a, double b)
// {
//     cout<<"Double ";
//     return a+b;
// }
// int main()
// {
//     cout<< sum(10,20)<<endl;
//     cout<< sum(7.5, 8.2)<<endl;
//     cout<< sum(7, 8)<<endl;
//     return 0;
// }

// #include<iostream>
// using namespace std;
// template<typename T>
// class Array{
//     T arr[10];
//     int n;
//     public:
//         void input()
//         {
//             cout<<"Enter no of elements";
//             cin>>n;
//             //input
//             for(int i=0; i<n; i++)
//             {
//                 cout<<"enter value of "<<i+1<<" element: ";

//             }
//         }
//         void output()
//         {
//             for(int i=0; i<n; i++)
//             {
//                 cout<<arr<<
//             }
//         }
// };
// int main()
// {
//     Array<int>
//     Array<float>
//     a1.input();
//     a2.input();
//     a1
// }

// #include<iostream>
// using namespace std;
// class data{
//     int a;
//     public:
//     data(int a1=0)
//     {
//         a=a1;
//     }
//     data operator-() // operator overloading
//     {
//         data temp;
//         temp.a=a*-1;
//         return temp;
//     }
//     void output()
//     {
//         cout<<a<<endl;
//     }
// };

// int main()
// {
//     data d1=10,d2;
//     d1.output();
//     d2 = -d1;
//     d2.output();
//     d1.output();
//     return 0;
// }

// #include<iostream>
// using namespace std;
// class data
// {
//     int a;
//      public:
//      data(int a1=0)
//         {
//              a=a1;
//         }
//         data operator ++(int)     //increment() // operator overloading
//         { //agar post increment karna hai to () iske andar int likh do to post increment ho jayega jese is code me ho rakha hai ;;
//             data temp;
//              a=a+1;
//              temp.a = a;
//              return temp;
//         }
//        void output()
//        {
//         cout<<a<<endl;
//         }
// };
    
// int main()
// {
//   data d1=10,d2;
//   d1.output();
//   //d2=d1.increment();
//   d2=d1++;
//   d2.output();
//   d1.output();
//   return 0;
// }

// #include<iostream>
// using namespace std;
// class complex
// { private:
//   int real, image;
//   public:
//   void set_data(int r, int i) 
//     {
//         real = r;
//         image = i;
//     }
//     void output()
//     {
//         if (image >= 0) {
//             cout << real << "+" << image << "i" << endl;
//             } else {
//             cout << real <<image << "i" << endl;
//             } 
//     }
//     complex sum(complex &obj) {
//         complex temp;
//         temp.real = real + obj.real;
//         temp.image = image + obj.image;
//         return temp;
//     } 
//     complex operator +(complex obj) {
//         complex temp;
//         temp.real = real + obj.real;
//         temp.image = image + obj.image;
//         return temp;
//     }
// };
// int main()
// {
//     complex c1, c2, c3;
//     c1.set_data(5,4);
//     c2.set_data(7,4);
//     c1.output();
//     c2.output();
//     c3 =c1.sum(c2);
//     c3.output();
//     return 0;
// }

// #include<iostream>
// using namespace std;
// class complex
// { private:
//   int real, image;
//   public:
//   complex(int r=0, int i=0) 
//     {
//         real = r;
//         image = i;
//     }
//     void output()
//     {
//         if (image >= 0) {
//             cout << real << "+" << image << "i" << endl;
//             } else {
//             cout << real <<image << "i" << endl;
//             } 
//     }
//     // complex sum(complex &obj) {
//     //     complex temp;
//     //     temp.real = real + obj.real;
//     //     temp.image = image + obj.image;
//     //     return temp;
//     // } 
//     complex operator +(complex obj) {
//         complex temp;
//         temp.real = real + obj.real;
//         temp.image = image + obj.image;
//         return temp;
//     }
//     complex operator *(complex &obj) {
//         complex temp;
//         temp.real = real*obj.real - image*obj.image;
//         temp.image = real*obj.image + image*obj.real;
//         return temp;
//     }
// };
// int main()
// {
//     complex c1(5,7), c2(4,7);
//     // c1.set_data(5,4);
//     // c2.set_data(7,4);
//     c1.output();
//     c2.output();
//     complex c3;
//     c3 =c1*c2+c3;
//     c3.output();
//     return 0;
// }

// #include<iostream>
// using namespace std;
// class Array{
//     int arr[10];
//     int n;
//     public:
//     int& at (int ind)
//     {
//         return arr[ind];
//     }
//     void output()
//     {
//         for(int i=0; i<5; i++)
//         cout<<arr[i];
//         cout<<endl;
//     }
// };
// int main()
// {
//     //Array a1;
//     // int &r = a1.at(0);
//     // r=10;
//     // int &r1 = a1.at(1);
//     // r1=20;
//     // int &r2 = a1.at(2);
//     // r2=30;
//     // int &r3 = a1.at(3);
//     // r3=40;
//     // int &r4 = a1.at(4);
//     // r4=50;
//     // int &r5 = a1.at(5);
//     // r5=60;
//     int n;
//     cout<< " enter the no. of elements";
//     cin>>n;
//     Array a1;
//     for(int i=0; i<n; i++)
//     {
//         int &r = a1.at(1);
//         r=10;
//     }
//     a1.output();
//     return 0;
// }

// reverse elements of 2D in 1D array
// #include<iostream>
// using namespace std;
// class array{
//     public:
//     void fuc(){
//         int ar[3][3];
//         int r,c;
//         cout<<"Enter elements in array\n";
//         for(r=0;r<3;r++){
//             for(c=0;c<3;c++){
//                 cin>>ar[r][c];
//             }
//         }
//         cout<<"\n----Array format----\n";
//         for(r=0;r<3;r++){
//             for(c=0;c<3;c++){
//                 cout<<ar[r][c]<<" ";
//                 cout<<ar[c][r]<<"  "<<endl;
//             }
            
//         }
//     }
// };
// int main(){
//     array obj;
//     obj.fuc();
// }

// reverse elements of 2D in 1D array
// #include<iostream>
// using namespace std;
// class array{
//     public:
//     void fuc(){
//         int ar[3][3];
//         int br[9],i;
//         int r,c,index=0;
//         cout<<"Enter elements in array\n";
//         for(r=0;r<3;r++){
//             for(c=0;c<3;c++){
//                 cin>>ar[r][c];
//             }
//         }
//         for(r=0;r<3;r++){
//             for(c=0;c<3;c++){
//                 cout<<ar[r][c]<<" ";
//                 br[index++]=ar[r][c]; 
//             }
//             cout<<endl;
//         }
//         cout<<"\n----1d array-----\n";
//         for(i=0;i<9;i++){
//             cout<<br[i]<<" ";
//         }
//         cout<<"\n-----Reversed 1d array----"<<endl;
//         for(i=8;i>=0;i--){
//             cout<<br[i]<<" ";
//         }
//     }
// };
// int main(){
//     array obj;
//     obj.fuc();
// }

// #include<iostream> // bitwise operation to conversion and output
// using namespace std;
// int main()
// {
//     int n;
//     cout<<"enter a no: ";
//     cin>>n;
//     for(int i=7;i>=0;i--)
//     {
//         int x=1<<i;
//         if(n&x)
//         cout<<1;
//         else
//         cout<<0;
//     }
//     return 0;
// }

// #include<iostream>   // bitwise operation to conversion and output using library//
// #include<bitset>
// using namespace std;
// int main()
// {
//     int n;
//     cout<<"enter a no: ";
//     cin>>n;
//     // for(int i=7;i>=0;i--)
//     // {
//     //     int x=1<<i;
//     //     if(n&x)
//     //     cout<<1;
//     //     else
//     //     cout<<0;
//     // }
//     bitset<16> a(n);
//     cout<<a;
//     return 0;
// }

// //print nth bit of a number// iske main me error bata rha hai
// #include<iostream>
// using namespace std;
// int main()
// {
//     int n,i;
//     cout<<"enter a no:";
//     cin>>n;
//     cout<<"enter position of bit :";
//     cin>>i;
//     if(n&(1<<i-1))
//     cout<<1;
//     else
//     cout<<0;
//     return 0;
// }

// #include<iostream> //reverse of bit 
// using namespace std;
// int main(){
//     int n,i;
//     cout<<"enter a no:";
//     cin>>n;
//     cout<<"enter the no of pos:";
//     cin>>i;
//     int x=(n^(1<<i-1));
//     cout<<x;
//     return 0;
// }

// #include<iostream> // alternate like 10101010
// #include<bitset>
// using  namespace std;
// int main()
// {
//     int n;
//     cout<<"enter a no:";
//     cin>>n;
//     n=n^(n>>1);
//     if(n&(n+1)==0)
//     cout<<"true";
//     else
//     cout<<"false";
//     return 0;
// }

//power of no.//
// #include<iostream>
// #include<bitset>
// using namespace std;
// int main()
// {
//     int n,p;
//     cout<<"enter a no and its power:";
//     cin>>n>>p;
//     int ans=1;
//     while(p)
//     {
//         if(p&1)
//         ans *= n;
//         n=n*n;
//         p=p>>1;
//     }
//     cout<<ans;
//     return 0;
// }

// #include<iostream>
// using namespace std;
// int main()
// {
//     int n;
//     int a[10];
//     cout<<"enter the no of elements: ";
//     cin>>n;
//     for(int i=0;i<n;i++)
//     {
//         if(a[i]<a[i+1])
//         cout<<"enter value of "<<i+1<<" elements: ";
//         cin>>a[i];
//     }
//     for(int i=0;i<n-1;i++)
//     {
//         if(a[i]<a[i+1])
//         cout<<"true";
//         else 
//         cout<<"false";
//     }

//     return 0;
// }

//---------------Power of a no using recursive function-------------//
// #include<iostream>
// using namespace std;
// int power(int n, int p)
// { 
//     if(p==0)
//      return 1;
//     return n*power(n,p-1); 
    
// }
// int main()
// {
//     int n,p;
//     cout<<"enter a no and its power:";
//     cin>>n>>p;
//     cout<<power(n,p);
//     return 0;
// }

// adhoora hai ye 
// #include<iostream>
// using namespace std;
// void number(int n, int number)
// { 
//     if(number>n)
//      return ;
//      cout<<number<<" ";
//      (number+1,n) ; 

    
// }
// int main()
// {
//     int n;
//     cout<<"enter a no:";
//     cin>>n;
//     number(1,n);
//     return 0;
// }

// nomber print karao reverse me 
// #include<iostream>
// using namespace std;
// void number(int n)
// {
//     if (n==0)
//     return ;
//     cout<<n<<" ";
//     number(n-1);
// }
// int main()
// {
//     int n;
//     cout<<"enter no: ";
//     cin>>n;
//     number(n);
//     return 0;
// }

// //print karao no sum of digits using recursive function//
// #include<iostream>
// using namespace std;
// int sum(int n)
// {
//     if(n==0)
//     return 0;
//     return n%10+sum(n/10);
//     cout<<n;
// }
// int main()
// {
//     int n;
//     cout<<"enter no: ";
//     cin>>n;
//     int result= sum(n);
//     cout<<"sum of digits: "<<result<<endl;
//     return 0; 
// }

// #include <iostream>
// using namespace std;

// int sumof(int n){
//     if(n==0)
//     return 0;
    
//     return  n%10+sumof(n/10);
    
// }

// int main() {
//     // Write C++ code here
//     int n;
//     cout<<"Enter a number";
//     cin>>n;
//     int result = sumof(n);
//     cout<<"Sum of digits :" << result<<endl;

//     return 0;
// }

//fibonacci series//
// #include<iostream>
// using namespace std;
//  int main()
//  {
//  int i,n,a,b,c;
//  cout<<"Enter number of terms:";
//  cin>>n;
//  for(i=1,a=0,b=1;i<=n;i++)
//  {
//  c = a+b;
// cout<<b;
//  a=b;
//  b=c;
//  }
//  return 0;
//  }
// // print nth term of fibonacci series//
// #include<iostream>
// using namespace std;
// int fibo(int n)
// {
//     if(n==0 || n==1)
//     return n;
//     //  if(n==1||n==2)
//     //  return 1;
//     return fibo(n-1) + fibo(n-2); //+ fibo(n-3);
// }
// int main()
// {
//     cout<<fibo(8);
//     return 0;
// }
//print tribonacci series//
// #include<iostream>
// using namespace std;
// int tribo(int n)
// {
//     if(n==0)
//     return 0;
//      if(n==1||n==2)
//      return 1;
//     return tribo(n-1) + tribo(n-2) + tribo(n-3);
// }
// int main()
// {
//     cout<<tribo(8);
//     return 0;
// }

// #include<iostream>
// using namespace std;
// int arr[], lb , ub, num;
// bool binerysearch(int arr[], int lb, int ub)
// {
//     if(lb>ub)
//     return false;
//     int mid=(lb+ub)/2;
//     if (arr[mid]==num)
//     return true;
//     if(num<arr[mid])
//      return binerysearch(arr,mid-1,lb); //ub);
//     // else if(num>arr[mid])
//     else
//         return binerysearch(arr,mid+1,ub); //lb);
// }

    //bool Binery search(int arr[], int lb, int ub)
    // if(lb>ub)
    // return false;
    // int mid=(lb+ub)/2;
    // if (arr[mid]==num)
    // return true;
    // if(num<arr[mid])
    //  Bineary_Search(arr,lb,mid,ub);

// #include <bits/stdc++.h>
// using namespace std;
// // A recursive binary search function. It returns
// // location of x in given array arr[low..high] is present,
// // otherwise -1
// int binarySearch(int arr[], int low, int high, int x)
// {
//     if (high >= low) {
//         int mid = low + (high - low) / 2;
//         // If the element is present at the middle
//         // itself
//         if (arr[mid] == x)
//             return mid;
//         // If element is smaller than mid, then
//         // it can only be present in left subarray
//         if (arr[mid] > x)
//             return binarySearch(arr, low, mid - 1, x);
//         // Else the element can only be present
//         // in right subarray
//         return binarySearch(arr, mid + 1, high, x);
//     }
//   return -1;
// }
// // Driver code
// int main()
// {
//     int arr[] = { 2, 3, 4, 10, 40 };
//     int query = 90;
//     int n = sizeof(arr) / sizeof(arr[0]);
//     int result = binarySearch(arr, 0, n - 1, query);
//     if (result == -1) cout << "Element is not present in array";
//     else cout << "Element is present at index " << result;
//     return 0;
// }

// // //Quick sort//
// #include<iostream>
// using namespace std;
// int partition(int arr[], int st, int end)
// {
//     int i,j;
//     int pivot_element = arr[end];
//     for(i=st,j=st-1 ; i<end ; i++)
//     {
//     if(arr[i] < pivot_element)
//     {
//     j++;
//     swap(arr[i],arr[j]);
//     }
//     }
//     j++;
//     swap(arr[j],arr[end]);
//     return j;
// }
// void quickSort(int arr[], int st, int end)
// {
//     if(st>=end)
//     return;
//     int pivot_index = partition(arr,st,end);
//     quickSort(arr,st,pivot_index-1);
//     quickSort(arr,pivot_index+1,end);
// }
// int main()
// {
//     int arr[] = {5,1,2,6,4,3,7,5,4};
//     int n = sizeof(arr)/sizeof(int);
//     quickSort(arr,0,n-1);
//     for(int i:arr)
//     cout<<i<<" ";
//     return 0;
// }

// //shell sort
// #include<iostream>
// using namespace std;
// void shellSorting(int arr[], int n)
// {
    
// }

// int main()
// {
//     int arr[]={5,1,2,6,4,3,7,5,9};
//     int n = sizeof(arr)/sizeof(int);
//     shellSorting(arr,n);
//     for(int i:arr)
//     cout<<i<<" ";
//     return 0;
// }

//map//
// #include<iostream>
// #include<map>
// using namespace std;
// void output(map<int,string> m1)
// {
//     cout<<"key\tvalue"<<endl;
//     for(auto i:m1)
//     {
//         cout<<i.first<<"\t"<<i.second<<endl;
//     }
// }
// /// @brief 
// /// @return 
// int main()
// {
//     map<int,string> m1;
//     m1[1]="one";
//     m1[2]="two";
//     m1[3]="three";
//     m1[4]="four";
//     m1[5]="five";
//     output(m1);
//     cout<<"size of map: "<<m1.size()<<endl;
//     cout<<"max size of map: "<<m1.max_size()<<endl;
//     cout<<"empty or not: "<<m1.empty()<<endl;
//     cout<<"find key 3: "<<m1.find(3)->first<<endl;
//     cout<<"find key 3: "<<m1.find(3)->second<<endl;
//     return 0;
// }

// // linked list//
// #include<iostream>
// using namespace std;
// class node
// {
//     public:
//     int value;
//     node *next;
//     node(int x)
//     {
//     value = x;
//     next = nullptr;
//     }
// };
// class LinkedList
// {
//     private:
//     node*head;
//     public:
//     LinkedList()
//     {
//         head = nullptr;
//     }
//     void addFirst(int num)//ADD FIRST
//     {
//         node *temp = new node(num); //new dynamic node
//         temp->next = head;
//         head = temp;
//     }
//     void addLast(int num)//ADDLAST
//     {
//         node *temp = new node(num);
//         if(head == nullptr)
//         head = temp;
//         else
//         {
//         node *ptr = head;
//         while(ptr->next != nullptr)
//         {
//         ptr = ptr->next;
//         }
//         ptr->next = temp;
//         }
//     }
//     void output()//OUTPUT
//     {
//         node *ptr = head;
//         while(ptr != nullptr)
//         {
//         cout<<ptr->value<<" ";
//         ptr = ptr->next;
//         }
//         cout<<endl;
//     }
//     void addAfter(int num , int loc)//ADD AFTER 
//     {
//         node *ptr = head;
//         while(ptr != nullptr && ptr->value !=loc)
//         ptr = ptr -> next;
//         if(ptr == nullptr)
//         {
//             cout<<"location not found\n";
//             return ;
//         }
//         node*temp = new node(num);
//         temp ->next = temp;

//     } 
   
//     void addBefore(int num , int loc)//ADD BEFORE
//     {
//         node *ptr = head;
//         if(ptr == nullptr)
//         {
//             cout<<"Empty List\n";
//             return;
//         }
//         if(head->value == loc)
//         {
//             addFirst(num);
//             return;
//         }
//         while(ptr->next != nullptr && ptr->next->value != loc)
//         {
//             ptr = ptr->next;
//         }
//         if(ptr->next == nullptr)
//         {
//             cout<<"Location not found\n";
//             return;
//         }
//         node *temp = new node(num);
//         temp->next = ptr->next;
//         ptr->next = temp;
//     }
//     void delFirst()
//     {
//         if(head == nullptr)
//         {
//         cout<<"Empty List\n";
//         return;
//         }
//         node *ptr = head;
//         head=head->next;
//         cout<<ptr->value<<" deleted\n";
//         delete ptr;
//     }
//     void delLast()//DELELTE FIRST
//     {
//         if(head == nullptr)
//         {
//         cout<<"Empty List\n";
//         return;
//         }
//         node *ptr = head;
//         if(head->next == nullptr)
//         {
//         head = nullptr;
//         }
//         else{
//         node *ptr2 = nullptr;
//         while(ptr->next != nullptr)
//         {
//         ptr2 = ptr;
//         ptr = ptr->next;
//         }
//         ptr2->next = nullptr;
//         }
//         cout<<ptr->value<<" deleted\n";
//         delete ptr;
//     }
//     void delNode(int loc)
//     {
//         if(head == nullptr)
//         {
//         cout<<"Underflow\n";
//         return;
//         }
//         if(head->value == loc)
//         {
//         delFirst();
//         return;
//         }
//         node *ptr = head->next, *ptr2=head;
//         while (ptr!=nullptr && ptr->value != loc)
//         {
//         ptr2 = ptr;
//         ptr = ptr->next;
//         }
//         if(ptr == nullptr)
//         {
//         cout<<"Location not found\n";
//         return;
//         }
//         ptr2->next = ptr->next;
//         cout<<ptr->value<<" deleted\n";
//         delete ptr;
//     }
//     void reverse()
//     {
//         if(head == nullptr || head->next==nullptr)
//         {
//         return;
//         }
//         node *p1=head->next,*p2=head,*p3=nullptr;
//         while (p1!=nullptr)
//         {
//         p2->next = p3;
//         p3=p2;
//         p2=p1;
//         p1=p1->next;
//         }
//         p2->next = p3;
//         head=p2;
//     }
  
// };
// int main()
// {
//     // //node n1 = 10;
//     // node*head = new node(10);//dynamic
//     // node*ptr  = new node(20);
//     // ptr->next = head; 
//     // head = ptr;
//     LinkedList list;
//     list.addFirst(10);
//     list.addFirst(20);
//     list.addFirst(30);
//     list.addFirst(40);
//     list.output();
//     list.addLast(70);
//     list.addLast(60);
//     list.output();
//     list.addAfter(100,60);
//     list.output();
//     list.addBefore(200,40);
//     list.output();
//     list.delFirst();
//     list.output();
//     list.delLast();
//     list.output();
//     list.delNode(20);
//     list.output();
//     list.reverse();
//     list.output();
//     return 0;
// }

// // class once again//
// #include<iostream>
// using namespace std;
// class data{
//     public:
//     int a ;
//     float b;
//     data(int a1=0, float b1=0) //constructor
//     {
//         a=a1;
//         b=b1;
//     }
// };
// int main (){
//     data*ptr = new data;
//     ptr->a=10;
//     ptr->b=7.5;
//     cout<<ptr->a<<" "<<ptr->b<<endl;
//     data *temp;
//     temp=ptr;
//     ptr->a=100;
//     cout<<temp->a<<" "<<temp->b<<endl;
// }
